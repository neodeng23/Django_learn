net start mysql80
net stop mysql80

创建数据库
    进入mysql数据库 执行
        create database 数据库名 default charset utf8
        通常数据库名跟项目名保持一致
    setting.py里进行数据库得配置
        修改DATABASES配置项的内容，由sqlite3变为mysql

    ENGINE - 指定数据库存储引擎
        mysql, sqlite3, oracle, postgresql
        NAME - 指定要连接的数据库的名称
        USER - 指定登录到数据库的用户名
        PASSWORD - 数据库的密码
        HOST/PORT - 连接具体数据库的IP和端口


什么是模型：
    模型是一个python类，它是由django.db.models.Model派生出的子类
    一个模型类代表数据库的一张数据表
    模型类中每一个类属性都代表数据库的一个字段
    模型是数据交互的接口，是表示和操作数据库的方法和方式

ORM框架：
    ORM即对象关系映射，它是一种程序技术，允许你使用类和对象对数据库进行操作，从而避免通过SQL语句操作数据库
    作用：
        1.建立模型类和表的对应关系，允许我们通过面向对象的方式来操作数据库
        2.根据设计的模型类，生成数据库中的表格
        3.通过简单的配置就可以进行数据库的切换

    优点：
        只需要面向对象编程，不需要面向数据库编写代码
            对数据库的操作都转化为对类属性和方法的操作
            不用编写各种数据库的sql语句
        实现了数据模型与数据库的解耦，屏蔽了不同数据库操作上的差异
            不在关注用的是mysql, oracle..等数据库的内部细节
            通过简单的配置就可以轻松更换数据库，而不需要修改代码

    缺点：
        对于复杂业务，使用成本较高
        根据对象的操作转换成SQL语句，根据查询的结果转化成对象，在映射过程中又性能损失

ORM     DB
类   -   数据表
对象  -   数据行
属性  -   字段

===========================================================================================================
数据库迁移
    迁移是Django同步对模型所作的更改（添加字段，删除模型等）到数据库模式的方式
    生成迁移文件的方式
        python3 manage.py makemigrations
        将应用下的models.py文件生成一个中间文件，并保存在migrations文件夹中
    执行迁移脚本程序
        python3 manage.py migrate
        执行迁移程序实现迁移，将每个应用的migrations目录中的中间文件同步回数据库+
===========================================================================================================

模型类 - 创建
    from django.db import models
    class 模型类名(models.Model):
        字段名 = models.字段类型(字段选项)

    字段类型:
        BooleanField()
            数据库类型：tinyint(1)
            编程语言中使用True或False来表示值
            数据库中使用0或1来表示具体的值

        CharField()
            数据库类型:varchar
            注意:必须要指定max_length参数值

        DateField()
            数据库类型:date
            作用：表示日期
            参数(三选一)
                auto_now:(取值True/False)每次保存对象是，自动设置为该字段的当前时间
                auto_now_add:(取值True/False)当对象第一次被创建时，自动设置当前时间
                default:(例'2022-2-22')设置当前时间

        DateTimeField()
            数据库类型:datetime(6)
            作用：表示日期和时间
            参数：同DateField()

        FloatField()
            数据库类型：double

        DecimalField()
            数据库类型：decimal(x, y)
            参数
                max_digits:位数总数，包括小数点后的位数
                decimal_place:小数点后的数字数量

        EmailField()
            数据库类型：varchar

        IntegerField()
            数据库类型：int

        ImageField()
            数据库类型:varchar(100)
            作用：保存图片的路径

        TextField()
            数据库类型：longtext
            作用：表示不定长的字符数据

    字段选项：
        字段选项，指定创建的列的额外的信息
        允许出现多个字段选项，多个选项之间使用逗号,隔开
        primary_key
            如果设置为True，表示该列为主键，如果指定一个字段为主键，则此数据库不会创建id字段
        blank
            设置为True时，字段可以为空，设置为False时，字段时必须填写的
        num
            如果设置为True，表示该列值允许为空
            默认为False，如果此选项为False，建议加入default选项来设置默认值
        default
            设置所在列的默认值，如果字段选项null=False建议添加此项
        db_index
            如果设置为True，表示为该列增加索引
        unique
            如果设置为True，表示该字段在数据库中的值必须是唯一
        db_column
            指定列的名称，如果不指定的话则采取属性名作为列名
        verbose_name
            设置此字段在admin界面上的显示名称

        样例：
            name = models.CharField(max_length=30, unique=True, null=False, db_index=True)

Meta类
    使用内部Meta类来给模型赋予属性，Meta类下有很多内建的类属性，可对模型类做一些控制
    class Meta:
        db_table = 'xxx'

