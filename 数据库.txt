创建数据：
    基本操作，包括增删改查操作，即（CRUD操作）
    ORM CRUD核心 -> 模型类.管理器对象
    每个继承自models.Model的模型类，都会有一个objects对象，被同样继承下来，这个对象叫管理器对象
    数据库的增删改查可以通过模型的管理器实现

    class MyModel(models.Model):
    ...
    MyModel.objects.create(...) # objects 是管理器对象

    Django ORM使用一种只管的方式，把数据库表中的数据表示成Python对象
    创建数据中每一条记录就是创建一个数据对象
    方案一
        MyModel.objects.create(属性1=值1, 属性2=值1, ...)
            成功：返回创建好的实体对象
            失败：抛出异常
    方案二
        创建MyModel实例对象，并调用save()进行保存
        obj = MyModel(属性=值, 属性=值)
        obj.属性 = 值
        obj.save()

Django Shell
    在Django提供了一个交互式的操作项目，叫Django Shell，它能够在交互模式用项目工程的代码执行相应的操作
    利用Django Shell可以代替编写view的代码来进行直接操作
    注意：项目代码发生变化是，需要重新进入django shell
    启动方式
        python3 manage.py shell


查询介绍：
    数据库的查询需要使用管理器对象进行
    通过MyModel.objects管理器方法调用查询方法

    all()   查询全部记录，返回QuerySet查询对象，类数组对象
        用法：MyModel.objects.all()
        作用：查询MyModel实体中所有数据，等同于select * from table
        books = Book.object.all()
        for book in books:
            print(book.title, book.info)

    filter()    查询符合条件的多条记录
        语法：MyModel.objects.filter(属性1=值1,属性2=值2)
        作用：返回包含此条件的全部数据集

    exclude()   查询符合条件之外的全部记录

    values('列1', '列2'..)
        用法：MyModel.objects.values(...)
        作用：查询部分列数据并返回，等同于select 列1 列2 from xxx
        返回值 QuerySet
            返回查询结果容器，容器内存字典，每个字典代表一条数据，格式为：{'列1':值1, '列2':值2}

    values_list('列1', '列2'..)
        用法：MyModel.objects.values_list(...)
        作用：返回元组形式的查询结果，等同于select 列1 列2 from xxx
        返回值 QuerySet容器对象，内部存放'元组'

    order_by()
        用法:MyModel.objects.order_by('-列', '列')
        作用:与all()方法，它会用SQL语句的ORDER BY子句，对查询结果进行某个字段选择性的进行排序
        说明：
            默认式按照升序排序，降序排序则需要在列钱增加'-'表示

    get()
        语法：MyModel.objects.get(条件)
        作用：返回满足条件的唯一一条数据
        说明：只能返回一条数据，如果查询结果多余一条则抛出Model.MultipleObjectsReturned异常，如果查询结果没有数据则抛出Model.DoesNotExist异常

    查询谓词：
        定义：做更灵活的条件查询时，需要使用查询谓词
        说明：每个查询谓词是一个独立的查询功能
        类属性 + "__" + 谓词
        __exact : 等值匹配
        __contains:包含指定值
        __startswith:以xxx开始
        __endswith:以xxx结束
        __gt:大于指定值
        __gte:大于等于
        __lt:小于
        __lte:小于等于
        __in:查询数据是否在指定范围内
        __range:查询数据是否在指定区间范围内

常用指令：
    from bookstore.models import Book 引用对应列表
    b1 = Book.objects.create(title='C',price=21,market_price=25,pub='中科可控') 新增一行
    a2 = Book.objects.values("title","pub") 选出对应的值

更新单个数据：
    1.通过get()得到要修改的实体对象
        b1 = Book.objects.get(id=1)
    2.通过对象.属性的方式修改数据
        b1.price = 22
    3.通过对象.save()保存数据
        b1.save()

批量数据更新
    直接调用QuerySet的Update(属性=值)实现批量修改
        books = Book.objects.filter(id__gt=3)
        books.update(price=0)